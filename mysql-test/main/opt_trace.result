SELECT table_name, column_name FROM information_schema.columns where table_name="OPTIMIZER_TRACE";
table_name	column_name
OPTIMIZER_TRACE	QUERY
OPTIMIZER_TRACE	TRACE
OPTIMIZER_TRACE	MISSING_BYTES_BEYOND_MAX_MEM_SIZE
OPTIMIZER_TRACE	INSUFFICIENT_PRIVILEGES
show variables like 'optimizer_trace';
Variable_name	Value
optimizer_trace	enabled=off,one_line=off
set optimizer_trace="enabled=on,one_line=on";
show variables like 'optimizer_trace';
Variable_name	Value
optimizer_trace	enabled=on,one_line=on
set optimizer_trace="enabled=off,one_line=off";
create table t1 (a int, b int);
insert into t1 values (1,2),(2,3);
create table t2 (b int);
insert into t2 values (1),(2);
create function f1 (a int) returns INT
return 1;
create view v1 as select * from t1 where t1.a=1;
create view v2 as select * from t1 where t1.a=1 group by t1.b;
set optimizer_trace="enabled=on,one_line=off";
# Mergeable views/derived tables
select * from v1;
a	b
1	2
select * from information_schema.OPTIMIZER_TRACE;
QUERY	TRACE	MISSING_BYTES_BEYOND_MAX_MEM_SIZE	INSUFFICIENT_PRIVILEGES
select * from v1	{
  "steps": [
    {
      "join_preparation": {
        "select_id": 1,
        "steps": [
          {
            "join_preparation": {
              "select_id": 2,
              "steps": [
                {
                  "expanded_query": "/* select#2 */ select `t1`.`a` AS `a`,`t1`.`b` AS `b` from `t1` where `t1`.`a` = 1"
                }
              ]
            }
          },
          {
            "expanded_query": "/* select#1 */ select `t1`.`a` AS `a`,`t1`.`b` AS `b` from `v1`"
          }
        ]
      }
    },
    {
      "join_optimization": {
        "select_id": 1,
        "steps": [
          {
            "view": {
              "table": "v1",
              "select_id": 2,
              "merged": true
            }
          },
          {
            "condition_processing": {
              "condition": "WHERE",
              "original_condition": "t1.a = 1",
              "steps": [
                {
                  "transformation": "equality_propagation",
                  "resulting_condition": "multiple equal(1, t1.a)"
                },
                {
                  "transformation": "constant_propagation",
                  "resulting_condition": "multiple equal(1, t1.a)"
                },
                {
                  "transformation": "trivial_condition_removal",
                  "resulting_condition": "multiple equal(1, t1.a)"
                }
              ]
            }
          },
          {
            "table_dependencies": [
              {
                "table": "t1",
                "row_may_be_null": false,
                "map_bit": 0,
                "depends_on_map_bits": []
              }
            ]
          },
          {
            "ref_optimizer_key_uses": []
          },
          "rows_estimation": [
            {
              "table": "t1",
              "table_scan": {
                "rows": 2,
                "cost": 2
              }
            }
          ]
        ]
      }
    },
    {
      "join_execution": {
        "select_id": 1,
        "steps": []
      }
    }
  ]
}	0	0
select * from (select * from t1)q;
a	b
1	2
2	3
select * from information_schema.OPTIMIZER_TRACE;
QUERY	TRACE	MISSING_BYTES_BEYOND_MAX_MEM_SIZE	INSUFFICIENT_PRIVILEGES
select * from (select * from t1)q	{
  "steps": [
    {
      "join_preparation": {
        "select_id": 1,
        "steps": [
          {
            "join_preparation": {
              "select_id": 2,
              "steps": [
                {
                  "expanded_query": "/* select#2 */ select `t1`.`a` AS `a`,`t1`.`b` AS `b` from `t1`"
                }
              ]
            }
          },
          {
            "expanded_query": "/* select#1 */ select `t1`.`a` AS `a`,`t1`.`b` AS `b` from (/* select#2 */ select `t1`.`a` AS `a`,`t1`.`b` AS `b` from `t1`) `q`"
          }
        ]
      }
    },
    {
      "join_optimization": {
        "select_id": 1,
        "steps": [
          {
            "derived": {
              "table": "q",
              "select_id": 2,
              "merged": true
            }
          },
          {
            "table_dependencies": [
              {
                "table": "t1",
                "row_may_be_null": false,
                "map_bit": 0,
                "depends_on_map_bits": []
              }
            ]
          },
          "rows_estimation": [
            {
              "table": "t1",
              "table_scan": {
                "rows": 2,
                "cost": 2
              }
            }
          ]
        ]
      }
    },
    {
      "join_execution": {
        "select_id": 1,
        "steps": []
      }
    }
  ]
}	0	0
# Non-Mergeable views
select * from v2;
a	b
1	2
select * from information_schema.OPTIMIZER_TRACE;
QUERY	TRACE	MISSING_BYTES_BEYOND_MAX_MEM_SIZE	INSUFFICIENT_PRIVILEGES
select * from v2	{
  "steps": [
    {
      "join_preparation": {
        "select_id": 1,
        "steps": [
          {
            "join_preparation": {
              "select_id": 2,
              "steps": [
                {
                  "expanded_query": "/* select#2 */ select `t1`.`a` AS `a`,`t1`.`b` AS `b` from `t1` where `t1`.`a` = 1 group by `t1`.`b`"
                }
              ]
            }
          },
          {
            "expanded_query": "/* select#1 */ select `v2`.`a` AS `a`,`v2`.`b` AS `b` from `v2`"
          }
        ]
      }
    },
    {
      "join_optimization": {
        "select_id": 1,
        "steps": [
          {
            "view": {
              "table": "v2",
              "select_id": 2,
              "merged": false
            }
          },
          {
            "join_optimization": {
              "select_id": 2,
              "steps": [
                {
                  "condition_processing": {
                    "condition": "WHERE",
                    "original_condition": "t1.a = 1",
                    "steps": [
                      {
                        "transformation": "equality_propagation",
                        "resulting_condition": "multiple equal(1, t1.a)"
                      },
                      {
                        "transformation": "constant_propagation",
                        "resulting_condition": "multiple equal(1, t1.a)"
                      },
                      {
                        "transformation": "trivial_condition_removal",
                        "resulting_condition": "multiple equal(1, t1.a)"
                      }
                    ]
                  }
                },
                {
                  "table_dependencies": [
                    {
                      "table": "t1",
                      "row_may_be_null": false,
                      "map_bit": 0,
                      "depends_on_map_bits": []
                    }
                  ]
                },
                {
                  "ref_optimizer_key_uses": []
                },
                "rows_estimation": [
                  {
                    "table": "t1",
                    "table_scan": {
                      "rows": 2,
                      "cost": 2
                    }
                  }
                ]
              ]
            }
          },
          {
            "table_dependencies": [
              {
                "table": "v2",
                "row_may_be_null": false,
                "map_bit": 0,
                "depends_on_map_bits": []
              }
            ]
          },
          "rows_estimation": [
            {
              "table": "v2",
              "table_scan": {
                "rows": 2,
                "cost": 2
              }
            }
          ]
        ]
      }
    },
    {
      "join_execution": {
        "select_id": 1,
        "steps": [
          {
            "join_execution": {
              "select_id": 2,
              "steps": []
            }
          }
        ]
      }
    }
  ]
}	0	0
drop table t1,t2;
drop view v1,v2;
drop function f1;
#
# ref-keyues test
#
create table t0 (a int);
INSERT INTO t0 VALUES (0),(1),(2),(3),(4),(5),(6),(7),(8),(9);
create table t1 (a int, b int, c int, key(a));
insert into t1 select A.a*10 + B.a, A.a*10 + B.a, A.a*10 + B.a from t0 A, t0 B;
create table t2(a int, b int, c int , key(a));
insert into t2 select A.a*10 + B.a, A.a*10 + B.a, A.a*10 + B.a from t0 A, t0 B;
explain select * from t1,t2 where t1.a=t2.b+2 and t2.a= t1.b;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	SIMPLE	t1	ALL	a	NULL	NULL	NULL	100	Using where
1	SIMPLE	t2	ref	a	a	5	test.t1.b	1	Using where
select * from information_schema.OPTIMIZER_TRACE;
QUERY	TRACE	MISSING_BYTES_BEYOND_MAX_MEM_SIZE	INSUFFICIENT_PRIVILEGES
explain select * from t1,t2 where t1.a=t2.b+2 and t2.a= t1.b	{
  "steps": [
    {
      "join_preparation": {
        "select_id": 1,
        "steps": [
          {
            "expanded_query": "select `t1`.`a` AS `a`,`t1`.`b` AS `b`,`t1`.`c` AS `c`,`t2`.`a` AS `a`,`t2`.`b` AS `b`,`t2`.`c` AS `c` from `t1` join `t2` where `t1`.`a` = `t2`.`b` + 2 and `t2`.`a` = `t1`.`b`"
          }
        ]
      }
    },
    {
      "join_optimization": {
        "select_id": 1,
        "steps": [
          {
            "condition_processing": {
              "condition": "WHERE",
              "original_condition": "t1.a = t2.b + 2 and t2.a = t1.b",
              "steps": [
                {
                  "transformation": "equality_propagation",
                  "resulting_condition": "t1.a = t2.b + 2 and multiple equal(t2.a, t1.b)"
                },
                {
                  "transformation": "constant_propagation",
                  "resulting_condition": "t1.a = t2.b + 2 and multiple equal(t2.a, t1.b)"
                },
                {
                  "transformation": "trivial_condition_removal",
                  "resulting_condition": "t1.a = t2.b + 2 and multiple equal(t2.a, t1.b)"
                }
              ]
            }
          },
          {
            "table_dependencies": [
              {
                "table": "t1",
                "row_may_be_null": false,
                "map_bit": 0,
                "depends_on_map_bits": []
              },
              {
                "table": "t2",
                "row_may_be_null": false,
                "map_bit": 1,
                "depends_on_map_bits": []
              }
            ]
          },
          {
            "ref_optimizer_key_uses": [
              {
                "table": "t1",
                "field": "a",
                "equals": "t2.b + 2",
                "null_rejecting": false
              },
              {
                "table": "t2",
                "field": "a",
                "equals": "t1.b",
                "null_rejecting": true
              }
            ]
          },
          "rows_estimation": [
            {
              "table": "t1",
              "table_scan": {
                "rows": 100,
                "cost": 2
              }
            },
            {
              "table": "t2",
              "table_scan": {
                "rows": 100,
                "cost": 2
              }
            }
          ]
        ]
      }
    },
    {
      "join_execution": {
        "select_id": 1,
        "steps": []
      }
    }
  ]
}	0	0
drop table t1,t2,t0;
#
# group_by min max optimization
#
CREATE TABLE t1 (id INT NOT NULL AUTO_INCREMENT PRIMARY KEY, a INT NOT NULL, KEY(a));
OPTIMIZE TABLE t1;
Table	Op	Msg_type	Msg_text
test.t1	optimize	status	OK
EXPLAIN SELECT DISTINCT a FROM t1;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	SIMPLE	t1	range	NULL	a	4	NULL	5	Using index for group-by
select * from information_schema.OPTIMIZER_TRACE;
QUERY	TRACE	MISSING_BYTES_BEYOND_MAX_MEM_SIZE	INSUFFICIENT_PRIVILEGES
EXPLAIN SELECT DISTINCT a FROM t1	{
  "steps": [
    {
      "join_preparation": {
        "select_id": 1,
        "steps": [
          {
            "expanded_query": "select distinct `t1`.`a` AS `a` from `t1`"
          }
        ]
      }
    },
    {
      "join_optimization": {
        "select_id": 1,
        "steps": [
          {
            "table_dependencies": [
              {
                "table": "t1",
                "row_may_be_null": false,
                "map_bit": 0,
                "depends_on_map_bits": []
              }
            ]
          },
          "rows_estimation": [
            {
              "rows_estimation": [
                {
                  "table": "t1",
                  "range_analysis": {
                    "table_scan": {
                      "rows": 65536,
                      "cost": 13255
                    },
                    "potential_range_indexes": [
                      {
                        "index": "PRIMARY",
                        "usable": false,
                        "cause": "not_applicable"
                      },
                      {
                        "index": "a",
                        "usable": true,
                        "key_parts": ["a"]
                      }
                    ],
                    "best_covering_index_scan": {
                      "index": "a",
                      "cost": 14627,
                      "chosen": false,
                      "cause": "cost"
                    },
                    "group_index_range": {
                      "distinct_query": true,
                      "potential_group_range_indexes": [
                        {
                          "index": "a",
                          "covering": true,
                          "rows": 5,
                          "cost": 7.5
                        }
                      ]
                    },
                    "best_group_range_summary": {
                      "type": "index_group",
                      "index": "a",
                      "group_attribute": null,
                      "min_aggregate": false,
                      "max_aggregate": false,
                      "distinct_aggregate": false,
                      "rows": 5,
                      "cost": 7.5,
                      "key_parts_used_for_access": ["a"],
                      "ranges": [],
                      "chosen": true
                    },
                    "chosen_range_access_summary": {}
                  }
                }
              ]
            }
          ]
        ]
      }
    },
    {
      "join_execution": {
        "select_id": 1,
        "steps": []
      }
    }
  ]
}	0	0
drop table t1;
# 
# With group by , where clause and MIN/MAX function
# 
CREATE TABLE t1 (a INT, b INT, c int, d int,  KEY(a,b,c,d));
INSERT INTO t1 VALUES (1,1,1,1), (2,2,2,2), (3,3,3,3), (4,4,4,4), (1,0,1,1), (3,2,3,3), (4,5,4,4);
ANALYZE TABLE t1;
Table	Op	Msg_type	Msg_text
test.t1	analyze	status	OK
EXPLAIN SELECT MIN(d) FROM t1 where b=2 and c=3  group by a;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	SIMPLE	t1	range	NULL	a	20	NULL	4	Using where; Using index for group-by
select * from information_schema.OPTIMIZER_TRACE;
QUERY	TRACE	MISSING_BYTES_BEYOND_MAX_MEM_SIZE	INSUFFICIENT_PRIVILEGES
EXPLAIN SELECT MIN(d) FROM t1 where b=2 and c=3  group by a	{
  "steps": [
    {
      "join_preparation": {
        "select_id": 1,
        "steps": [
          {
            "expanded_query": "select min(`t1`.`d`) AS `MIN(d)` from `t1` where `t1`.`b` = 2 and `t1`.`c` = 3 group by `t1`.`a`"
          }
        ]
      }
    },
    {
      "join_optimization": {
        "select_id": 1,
        "steps": [
          {
            "condition_processing": {
              "condition": "WHERE",
              "original_condition": "t1.b = 2 and t1.c = 3",
              "steps": [
                {
                  "transformation": "equality_propagation",
                  "resulting_condition": "multiple equal(2, t1.b) and multiple equal(3, t1.c)"
                },
                {
                  "transformation": "constant_propagation",
                  "resulting_condition": "multiple equal(2, t1.b) and multiple equal(3, t1.c)"
                },
                {
                  "transformation": "trivial_condition_removal",
                  "resulting_condition": "multiple equal(2, t1.b) and multiple equal(3, t1.c)"
                }
              ]
            }
          },
          {
            "table_dependencies": [
              {
                "table": "t1",
                "row_may_be_null": false,
                "map_bit": 0,
                "depends_on_map_bits": []
              }
            ]
          },
          {
            "ref_optimizer_key_uses": []
          },
          "rows_estimation": [
            {
              "rows_estimation": [
                {
                  "table": "t1",
                  "range_analysis": {
                    "table_scan": {
                      "rows": 7,
                      "cost": 5
                    },
                    "potential_range_indexes": [
                      {
                        "index": "a",
                        "usable": true,
                        "key_parts": ["a", "b", "c", "d"]
                      }
                    ],
                    "best_covering_index_scan": {
                      "index": "a",
                      "cost": 2.7006,
                      "chosen": true
                    },
                    "setup_range_conditions": [],
                    "group_index_range": {
                      "potential_group_range_indexes": [
                        {
                          "index": "a",
                          "covering": true,
                          "index_dives_for_eq_ranges": true,
                          "ranges": ["2 <= b <= 2 AND 3 <= c <= 3"],
                          "rows": 4,
                          "cost": 2.2
                        }
                      ]
                    },
                    "best_group_range_summary": {
                      "type": "index_group",
                      "index": "a",
                      "group_attribute": "d",
                      "min_aggregate": true,
                      "max_aggregate": false,
                      "distinct_aggregate": false,
                      "rows": 4,
                      "cost": 2.2,
                      "key_parts_used_for_access": ["a", "b", "c"],
                      "ranges": ["2 <= b <= 2 AND 3 <= c <= 3"],
                      "chosen": true
                    },
                    "analyzing_range_alternatives": {},
                    "chosen_range_access_summary": {}
                  }
                }
              ]
            }
          ]
        ]
      }
    },
    {
      "join_execution": {
        "select_id": 1,
        "steps": []
      }
    }
  ]
}	0	0
DROP TABLE t1;
