SELECT table_name, column_name FROM information_schema.columns where table_name="OPTIMIZER_TRACE";
table_name	column_name
OPTIMIZER_TRACE	QUERY
OPTIMIZER_TRACE	TRACE
OPTIMIZER_TRACE	MISSING_BYTES_BEYOND_MAX_MEM_SIZE
OPTIMIZER_TRACE	INSUFFICIENT_PRIVILEGES
show variables like 'optimizer_trace';
Variable_name	Value
optimizer_trace	enabled=off,one_line=off
set optimizer_trace="enabled=on,one_line=on";
show variables like 'optimizer_trace';
Variable_name	Value
optimizer_trace	enabled=on,one_line=on
set optimizer_trace="enabled=off,one_line=off";
create table t1 (a int, b int);
insert into t1 values (1,2),(2,3);
create table t2 (b int);
insert into t2 values (1),(2);
create function f1 (a int) returns INT
return 1;
create view v1 as select * from t1 where t1.a=1;
create view v2 as select * from t1 where t1.a=1 group by t1.b;
set optimizer_trace="enabled=on,one_line=off";
# Mergeable views/derived tables
select * from v1;
a	b
1	2
select * from information_schema.OPTIMIZER_TRACE;
QUERY	TRACE	MISSING_BYTES_BEYOND_MAX_MEM_SIZE	INSUFFICIENT_PRIVILEGES
select * from v1	{
  "steps": [
    {
      "join_preparation": {
        "select_id": 1,
        "steps": [
          {
            "view": {
              "table": "v1",
              "select_id": 2,
              "merged": true
            }
          },
          {
            "join_preparation": {
              "select_id": 2,
              "steps": [
                {
                  "expanded_query": "/* select#2 */ select `t1`.`a` AS `a`,`t1`.`b` AS `b` from `t1` where `t1`.`a` = 1"
                }
              ]
            }
          },
          {
            "expanded_query": "/* select#1 */ select `t1`.`a` AS `a`,`t1`.`b` AS `b` from `v1`"
          }
        ]
      }
    },
    {
      "join_optimization": {
        "select_id": 1,
        "steps": [
          {
            "condition_processing": {
              "condition": "WHERE",
              "original_condition": "t1.a = 1",
              "steps": [
                {
                  "transformation": "equality_propagation",
                  "resulting_condition": "multiple equal(1, t1.a)"
                },
                {
                  "transformation": "constant_propagation",
                  "resulting_condition": "multiple equal(1, t1.a)"
                },
                {
                  "transformation": "trivial_condition_removal",
                  "resulting_condition": "multiple equal(1, t1.a)"
                }
              ]
            }
          },
          {
            "table_dependencies": [
              {
                "table": "t1",
                "row_may_be_null": false,
                "map_bit": 0,
                "depends_on_map_bits": []
              }
            ]
          },
          {
            "ref_optimizer_key_uses": []
          },
          "rows_estimation": [
            {
              "table": "t1",
              "table_scan": {
                "rows": 2,
                "cost": 2
              }
            }
          ],
          {
            "considered_execution_plans": [
              {
                "plan_prefix": [],
                "table": "t1",
                "best_access_path": {
                  "considered_access_paths": [
                    {
                      "access_type": "scan",
                      "resulting_rows": 2,
                      "cost": 2.0044,
                      "chosen": true
                    }
                  ]
                },
                "rows_for_plan": 2,
                "cost_for_plan": 2.4044
              }
            ]
          },
          {
            "attaching_conditions_to_tables": {
              "original_condition": "t1.a = 1",
              "attached_conditions_computation": [],
              "attached_conditions_summary": [
                {
                  "table": "t1",
                  "attached": "t1.a = 1"
                }
              ]
            }
          }
        ]
      }
    },
    {
      "join_execution": {
        "select_id": 1,
        "steps": []
      }
    }
  ]
}	0	0
select * from (select * from t1)q;
a	b
1	2
2	3
select * from information_schema.OPTIMIZER_TRACE;
QUERY	TRACE	MISSING_BYTES_BEYOND_MAX_MEM_SIZE	INSUFFICIENT_PRIVILEGES
select * from (select * from t1)q	{
  "steps": [
    {
      "join_preparation": {
        "select_id": 1,
        "steps": [
          {
            "derived": {
              "table": "q",
              "select_id": 2,
              "merged": true
            }
          },
          {
            "join_preparation": {
              "select_id": 2,
              "steps": [
                {
                  "expanded_query": "/* select#2 */ select `t1`.`a` AS `a`,`t1`.`b` AS `b` from `t1`"
                }
              ]
            }
          },
          {
            "expanded_query": "/* select#1 */ select `t1`.`a` AS `a`,`t1`.`b` AS `b` from (/* select#2 */ select `t1`.`a` AS `a`,`t1`.`b` AS `b` from `t1`) `q`"
          }
        ]
      }
    },
    {
      "join_optimization": {
        "select_id": 1,
        "steps": [
          {
            "table_dependencies": [
              {
                "table": "t1",
                "row_may_be_null": false,
                "map_bit": 0,
                "depends_on_map_bits": []
              }
            ]
          },
          "rows_estimation": [
            {
              "table": "t1",
              "table_scan": {
                "rows": 2,
                "cost": 2
              }
            }
          ],
          {
            "considered_execution_plans": [
              {
                "plan_prefix": [],
                "table": "t1",
                "best_access_path": {
                  "considered_access_paths": [
                    {
                      "access_type": "scan",
                      "resulting_rows": 2,
                      "cost": 2.0044,
                      "chosen": true
                    }
                  ]
                },
                "rows_for_plan": 2,
                "cost_for_plan": 2.4044
              }
            ]
          },
          {
            "attaching_conditions_to_tables": {
              "original_condition": null,
              "attached_conditions_computation": [],
              "attached_conditions_summary": [
                {
                  "table": "t1",
                  "attached": null
                }
              ]
            }
          }
        ]
      }
    },
    {
      "join_execution": {
        "select_id": 1,
        "steps": []
      }
    }
  ]
}	0	0
# Non-Mergeable views
select * from v2;
a	b
1	2
select * from information_schema.OPTIMIZER_TRACE;
QUERY	TRACE	MISSING_BYTES_BEYOND_MAX_MEM_SIZE	INSUFFICIENT_PRIVILEGES
select * from v2	{
  "steps": [
    {
      "join_preparation": {
        "select_id": 1,
        "steps": [
          {
            "view": {
              "table": "v2",
              "select_id": 2,
              "materialized": true
            }
          },
          {
            "join_preparation": {
              "select_id": 2,
              "steps": [
                {
                  "expanded_query": "/* select#2 */ select `t1`.`a` AS `a`,`t1`.`b` AS `b` from `t1` where `t1`.`a` = 1 group by `t1`.`b`"
                }
              ]
            }
          },
          {
            "expanded_query": "/* select#1 */ select `v2`.`a` AS `a`,`v2`.`b` AS `b` from `v2`"
          }
        ]
      }
    },
    {
      "join_optimization": {
        "select_id": 1,
        "steps": [
          {
            "join_optimization": {
              "select_id": 2,
              "steps": [
                {
                  "condition_processing": {
                    "condition": "WHERE",
                    "original_condition": "t1.a = 1",
                    "steps": [
                      {
                        "transformation": "equality_propagation",
                        "resulting_condition": "multiple equal(1, t1.a)"
                      },
                      {
                        "transformation": "constant_propagation",
                        "resulting_condition": "multiple equal(1, t1.a)"
                      },
                      {
                        "transformation": "trivial_condition_removal",
                        "resulting_condition": "multiple equal(1, t1.a)"
                      }
                    ]
                  }
                },
                {
                  "table_dependencies": [
                    {
                      "table": "t1",
                      "row_may_be_null": false,
                      "map_bit": 0,
                      "depends_on_map_bits": []
                    }
                  ]
                },
                {
                  "ref_optimizer_key_uses": []
                },
                "rows_estimation": [
                  {
                    "table": "t1",
                    "table_scan": {
                      "rows": 2,
                      "cost": 2
                    }
                  }
                ],
                {
                  "considered_execution_plans": [
                    {
                      "plan_prefix": [],
                      "table": "t1",
                      "best_access_path": {
                        "considered_access_paths": [
                          {
                            "access_type": "scan",
                            "resulting_rows": 2,
                            "cost": 2.0044,
                            "chosen": true,
                            "use_tmp_table": true
                          }
                        ]
                      },
                      "rows_for_plan": 2,
                      "cost_for_plan": 2.4044
                    }
                  ]
                },
                {
                  "attaching_conditions_to_tables": {
                    "original_condition": "t1.a = 1",
                    "attached_conditions_computation": [],
                    "attached_conditions_summary": [
                      {
                        "table": "t1",
                        "attached": "t1.a = 1"
                      }
                    ]
                  }
                }
              ]
            }
          },
          {
            "table_dependencies": [
              {
                "table": "v2",
                "row_may_be_null": false,
                "map_bit": 0,
                "depends_on_map_bits": []
              }
            ]
          },
          "rows_estimation": [
            {
              "table": "v2",
              "table_scan": {
                "rows": 2,
                "cost": 2
              }
            }
          ],
          {
            "considered_execution_plans": [
              {
                "plan_prefix": [],
                "table": "v2",
                "best_access_path": {
                  "considered_access_paths": [
                    {
                      "access_type": "scan",
                      "resulting_rows": 2,
                      "cost": 2,
                      "chosen": true
                    }
                  ]
                },
                "rows_for_plan": 2,
                "cost_for_plan": 2.4
              }
            ]
          },
          {
            "attaching_conditions_to_tables": {
              "original_condition": null,
              "attached_conditions_computation": [],
              "attached_conditions_summary": [
                {
                  "table": "v2",
                  "attached": null
                }
              ]
            }
          }
        ]
      }
    },
    {
      "join_execution": {
        "select_id": 1,
        "steps": [
          {
            "join_execution": {
              "select_id": 2,
              "steps": []
            }
          }
        ]
      }
    }
  ]
}	0	0
drop table t1,t2;
drop view v1,v2;
drop function f1;
#
# ref-keyues test
#
create table t0 (a int);
INSERT INTO t0 VALUES (0),(1),(2),(3),(4),(5),(6),(7),(8),(9);
create table t1 (a int, b int, c int, key(a));
insert into t1 select A.a*10 + B.a, A.a*10 + B.a, A.a*10 + B.a from t0 A, t0 B;
create table t2(a int, b int, c int , key(a));
insert into t2 select A.a*10 + B.a, A.a*10 + B.a, A.a*10 + B.a from t0 A, t0 B;
explain select * from t1,t2 where t1.a=t2.b+2 and t2.a= t1.b;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	SIMPLE	t1	ALL	a	NULL	NULL	NULL	100	Using where
1	SIMPLE	t2	ref	a	a	5	test.t1.b	1	Using where
select * from information_schema.OPTIMIZER_TRACE;
QUERY	TRACE	MISSING_BYTES_BEYOND_MAX_MEM_SIZE	INSUFFICIENT_PRIVILEGES
explain select * from t1,t2 where t1.a=t2.b+2 and t2.a= t1.b	{
  "steps": [
    {
      "join_preparation": {
        "select_id": 1,
        "steps": [
          {
            "expanded_query": "select `t1`.`a` AS `a`,`t1`.`b` AS `b`,`t1`.`c` AS `c`,`t2`.`a` AS `a`,`t2`.`b` AS `b`,`t2`.`c` AS `c` from `t1` join `t2` where `t1`.`a` = `t2`.`b` + 2 and `t2`.`a` = `t1`.`b`"
          }
        ]
      }
    },
    {
      "join_optimization": {
        "select_id": 1,
        "steps": [
          {
            "condition_processing": {
              "condition": "WHERE",
              "original_condition": "t1.a = t2.b + 2 and t2.a = t1.b",
              "steps": [
                {
                  "transformation": "equality_propagation",
                  "resulting_condition": "t1.a = t2.b + 2 and multiple equal(t2.a, t1.b)"
                },
                {
                  "transformation": "constant_propagation",
                  "resulting_condition": "t1.a = t2.b + 2 and multiple equal(t2.a, t1.b)"
                },
                {
                  "transformation": "trivial_condition_removal",
                  "resulting_condition": "t1.a = t2.b + 2 and multiple equal(t2.a, t1.b)"
                }
              ]
            }
          },
          {
            "table_dependencies": [
              {
                "table": "t1",
                "row_may_be_null": false,
                "map_bit": 0,
                "depends_on_map_bits": []
              },
              {
                "table": "t2",
                "row_may_be_null": false,
                "map_bit": 1,
                "depends_on_map_bits": []
              }
            ]
          },
          {
            "ref_optimizer_key_uses": [
              {
                "table": "t1",
                "field": "a",
                "equals": "t2.b + 2",
                "null_rejecting": false
              },
              {
                "table": "t2",
                "field": "a",
                "equals": "t1.b",
                "null_rejecting": true
              }
            ]
          },
          "rows_estimation": [
            {
              "table": "t1",
              "table_scan": {
                "rows": 100,
                "cost": 2
              }
            },
            {
              "table": "t2",
              "table_scan": {
                "rows": 100,
                "cost": 2
              }
            }
          ],
          {
            "considered_execution_plans": [
              {
                "plan_prefix": [],
                "table": "t1",
                "best_access_path": {
                  "considered_access_paths": [
                    {
                      "access_type": "scan",
                      "resulting_rows": 100,
                      "cost": 2.3174,
                      "chosen": true
                    }
                  ]
                },
                "rows_for_plan": 100,
                "cost_for_plan": 22.317,
                "rest_of_plan": [
                  {
                    "plan_prefix": ["t1"],
                    "table": "t2",
                    "best_access_path": {
                      "considered_access_paths": [
                        {
                          "access_type": "ref",
                          "index": "a",
                          "used_range_estimates": false,
                          "cause": "not_available",
                          "rows": 1,
                          "cost": 200.2,
                          "chosen": true
                        },
                        {
                          "access_type": "scan",
                          "resulting_rows": 75,
                          "cost": 7.3174,
                          "chosen": false
                        }
                      ]
                    },
                    "rows_for_plan": 100,
                    "cost_for_plan": 242.32
                  }
                ]
              },
              {
                "plan_prefix": [],
                "table": "t2",
                "best_access_path": {
                  "considered_access_paths": [
                    {
                      "access_type": "scan",
                      "resulting_rows": 100,
                      "cost": 2.3174,
                      "chosen": true
                    }
                  ]
                },
                "rows_for_plan": 100,
                "cost_for_plan": 22.317,
                "rest_of_plan": [
                  {
                    "plan_prefix": ["t2"],
                    "table": "t1",
                    "best_access_path": {
                      "considered_access_paths": [
                        {
                          "access_type": "ref",
                          "index": "a",
                          "used_range_estimates": false,
                          "cause": "not_available",
                          "rows": 1,
                          "cost": 200.2,
                          "chosen": true
                        },
                        {
                          "access_type": "scan",
                          "resulting_rows": 75,
                          "cost": 7.3174,
                          "chosen": false
                        }
                      ]
                    },
                    "rows_for_plan": 100,
                    "cost_for_plan": 242.32,
                    "pruned_by_cost": true
                  }
                ]
              }
            ]
          },
          {
            "attaching_conditions_to_tables": {
              "original_condition": "t2.a = t1.b and t1.a = t2.b + 2",
              "attached_conditions_computation": [],
              "attached_conditions_summary": [
                {
                  "table": "t1",
                  "attached": "t1.b is not null"
                },
                {
                  "table": "t2",
                  "attached": "t1.a = t2.b + 2"
                }
              ]
            }
          }
        ]
      }
    },
    {
      "join_execution": {
        "select_id": 1,
        "steps": []
      }
    }
  ]
}	0	0
drop table t1,t2,t0;
#
# group_by min max optimization
#
CREATE TABLE t1 (id INT NOT NULL AUTO_INCREMENT PRIMARY KEY, a INT NOT NULL, KEY(a));
OPTIMIZE TABLE t1;
Table	Op	Msg_type	Msg_text
test.t1	optimize	status	OK
EXPLAIN SELECT DISTINCT a FROM t1;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	SIMPLE	t1	range	NULL	a	4	NULL	5	Using index for group-by
select * from information_schema.OPTIMIZER_TRACE;
QUERY	TRACE	MISSING_BYTES_BEYOND_MAX_MEM_SIZE	INSUFFICIENT_PRIVILEGES
EXPLAIN SELECT DISTINCT a FROM t1	{
  "steps": [
    {
      "join_preparation": {
        "select_id": 1,
        "steps": [
          {
            "expanded_query": "select distinct `t1`.`a` AS `a` from `t1`"
          }
        ]
      }
    },
    {
      "join_optimization": {
        "select_id": 1,
        "steps": [
          {
            "table_dependencies": [
              {
                "table": "t1",
                "row_may_be_null": false,
                "map_bit": 0,
                "depends_on_map_bits": []
              }
            ]
          },
          "rows_estimation": [
            {
              "table": "t1",
              "range_analysis": {
                "table_scan": {
                  "rows": 65536,
                  "cost": 13255
                },
                "potential_range_indexes": [
                  {
                    "index": "PRIMARY",
                    "usable": false,
                    "cause": "not_applicable"
                  },
                  {
                    "index": "a",
                    "usable": true,
                    "key_parts": ["a"]
                  }
                ],
                "best_covering_index_scan": {
                  "index": "a",
                  "cost": 14627,
                  "chosen": false,
                  "cause": "cost"
                },
                "group_index_range": {
                  "distinct_query": true,
                  "potential_group_range_indexes": [
                    {
                      "index": "a",
                      "covering": true,
                      "rows": 5,
                      "cost": 7.5
                    }
                  ]
                },
                "best_group_range_summary": {
                  "type": "index_group",
                  "index": "a",
                  "group_attribute": null,
                  "min_aggregate": false,
                  "max_aggregate": false,
                  "distinct_aggregate": false,
                  "rows": 5,
                  "cost": 7.5,
                  "key_parts_used_for_access": ["a"],
                  "ranges": [],
                  "chosen": true
                },
                "chosen_range_access_summary": {
                  "range_access_plan": {
                    "type": "index_group",
                    "index": "a",
                    "group_attribute": null,
                    "min_aggregate": false,
                    "max_aggregate": false,
                    "distinct_aggregate": false,
                    "rows": 5,
                    "cost": 7.5,
                    "key_parts_used_for_access": ["a"],
                    "ranges": []
                  },
                  "rows_for_plan": 5,
                  "cost_for_plan": 7.5,
                  "chosen": true
                }
              }
            }
          ],
          {
            "considered_execution_plans": [
              {
                "plan_prefix": [],
                "table": "t1",
                "best_access_path": {
                  "considered_access_paths": [
                    {
                      "access_type": "range",
                      "resulting_rows": 5,
                      "cost": 7.5,
                      "chosen": true
                    }
                  ]
                },
                "rows_for_plan": 5,
                "cost_for_plan": 8.5
              }
            ]
          },
          {
            "attaching_conditions_to_tables": {
              "original_condition": null,
              "attached_conditions_computation": [],
              "attached_conditions_summary": [
                {
                  "table": "t1",
                  "attached": null
                }
              ]
            }
          }
        ]
      }
    },
    {
      "join_execution": {
        "select_id": 1,
        "steps": []
      }
    }
  ]
}	0	0
drop table t1;
# 
# With group by , where clause and MIN/MAX function
# 
CREATE TABLE t1 (a INT, b INT, c int, d int,  KEY(a,b,c,d));
INSERT INTO t1 VALUES (1,1,1,1), (2,2,2,2), (3,3,3,3), (4,4,4,4), (1,0,1,1), (3,2,3,3), (4,5,4,4);
ANALYZE TABLE t1;
Table	Op	Msg_type	Msg_text
test.t1	analyze	status	OK
EXPLAIN SELECT MIN(d) FROM t1 where b=2 and c=3  group by a;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	SIMPLE	t1	range	NULL	a	20	NULL	4	Using where; Using index for group-by
select * from information_schema.OPTIMIZER_TRACE;
QUERY	TRACE	MISSING_BYTES_BEYOND_MAX_MEM_SIZE	INSUFFICIENT_PRIVILEGES
EXPLAIN SELECT MIN(d) FROM t1 where b=2 and c=3  group by a	{
  "steps": [
    {
      "join_preparation": {
        "select_id": 1,
        "steps": [
          {
            "expanded_query": "select min(`t1`.`d`) AS `MIN(d)` from `t1` where `t1`.`b` = 2 and `t1`.`c` = 3 group by `t1`.`a`"
          }
        ]
      }
    },
    {
      "join_optimization": {
        "select_id": 1,
        "steps": [
          {
            "condition_processing": {
              "condition": "WHERE",
              "original_condition": "t1.b = 2 and t1.c = 3",
              "steps": [
                {
                  "transformation": "equality_propagation",
                  "resulting_condition": "multiple equal(2, t1.b) and multiple equal(3, t1.c)"
                },
                {
                  "transformation": "constant_propagation",
                  "resulting_condition": "multiple equal(2, t1.b) and multiple equal(3, t1.c)"
                },
                {
                  "transformation": "trivial_condition_removal",
                  "resulting_condition": "multiple equal(2, t1.b) and multiple equal(3, t1.c)"
                }
              ]
            }
          },
          {
            "table_dependencies": [
              {
                "table": "t1",
                "row_may_be_null": false,
                "map_bit": 0,
                "depends_on_map_bits": []
              }
            ]
          },
          {
            "ref_optimizer_key_uses": []
          },
          "rows_estimation": [
            {
              "table": "t1",
              "range_analysis": {
                "table_scan": {
                  "rows": 7,
                  "cost": 5
                },
                "potential_range_indexes": [
                  {
                    "index": "a",
                    "usable": true,
                    "key_parts": ["a", "b", "c", "d"]
                  }
                ],
                "best_covering_index_scan": {
                  "index": "a",
                  "cost": 2.7006,
                  "chosen": true
                },
                "setup_range_conditions": [],
                "group_index_range": {
                  "potential_group_range_indexes": [
                    {
                      "index": "a",
                      "covering": true,
                      "index_dives_for_eq_ranges": true,
                      "ranges": ["2 <= b <= 2 AND 3 <= c <= 3"],
                      "rows": 4,
                      "cost": 2.2
                    }
                  ]
                },
                "best_group_range_summary": {
                  "type": "index_group",
                  "index": "a",
                  "group_attribute": "d",
                  "min_aggregate": true,
                  "max_aggregate": false,
                  "distinct_aggregate": false,
                  "rows": 4,
                  "cost": 2.2,
                  "key_parts_used_for_access": ["a", "b", "c"],
                  "ranges": ["2 <= b <= 2 AND 3 <= c <= 3"],
                  "chosen": true
                },
                "analyzing_range_alternatives": {
                  "range_scan_alternatives": [],
                  "analyzing_roworder_intersect": {
                    "cause": "too_few_roworder_scans"
                  },
                  "analyzing_index_merge_union": []
                },
                "chosen_range_access_summary": {
                  "range_access_plan": {
                    "type": "index_group",
                    "index": "a",
                    "group_attribute": "d",
                    "min_aggregate": true,
                    "max_aggregate": false,
                    "distinct_aggregate": false,
                    "rows": 4,
                    "cost": 2.2,
                    "key_parts_used_for_access": ["a", "b", "c"],
                    "ranges": ["2 <= b <= 2 AND 3 <= c <= 3"]
                  },
                  "rows_for_plan": 4,
                  "cost_for_plan": 2.2,
                  "chosen": true
                }
              }
            }
          ],
          {
            "considered_execution_plans": [
              {
                "plan_prefix": [],
                "table": "t1",
                "best_access_path": {
                  "considered_access_paths": [
                    {
                      "access_type": "range",
                      "resulting_rows": 4,
                      "cost": 2.2,
                      "chosen": true,
                      "use_tmp_table": true
                    }
                  ]
                },
                "rows_for_plan": 4,
                "cost_for_plan": 3
              }
            ]
          },
          {
            "attaching_conditions_to_tables": {
              "original_condition": "t1.b = 2 and t1.c = 3",
              "attached_conditions_computation": [],
              "attached_conditions_summary": [
                {
                  "table": "t1",
                  "attached": "t1.b = 2 and t1.c = 3"
                }
              ]
            }
          }
        ]
      }
    },
    {
      "join_execution": {
        "select_id": 1,
        "steps": []
      }
    }
  ]
}	0	0
DROP TABLE t1;
#
# Late ORDER BY optimization
#
create table ten(a int);
insert into ten values (0),(1),(2),(3),(4),(5),(6),(7),(8),(9);
create table one_k(a int primary key);
insert into one_k select A.a + B.a* 10 + C.a * 100 from ten A, ten B, ten C;
create table t1  (
pk int not null,
a int,
b int,
c int,
filler char(100),
KEY a_a(c),
KEY a_c(a,c),
KEY a_b(a,b)
);
insert into t1
select a, a,a,a, 'filler-dataaa' from test.one_k;
update t1 set a=1 where pk between 0 and 180;
update t1 set b=2 where pk between 0 and 20;
select count(*) from t1 where a=1 and b=2;
count(*)
21
set optimizer_trace='enabled=on';
explain  select * from t1 where a=1 and b=2 order by c limit 1;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	SIMPLE	t1	ref	a_c,a_b	a_b	10	const,const	21	Using where; Using filesort
select * from INFORMATION_SCHEMA.OPTIMIZER_TRACE;
QUERY	TRACE	MISSING_BYTES_BEYOND_MAX_MEM_SIZE	INSUFFICIENT_PRIVILEGES
explain  select * from t1 where a=1 and b=2 order by c limit 1	{
  "steps": [
    {
      "join_preparation": {
        "select_id": 1,
        "steps": [
          {
            "expanded_query": "select `t1`.`pk` AS `pk`,`t1`.`a` AS `a`,`t1`.`b` AS `b`,`t1`.`c` AS `c`,`t1`.`filler` AS `filler` from `t1` where `t1`.`a` = 1 and `t1`.`b` = 2 order by `t1`.`c` limit 1"
          }
        ]
      }
    },
    {
      "join_optimization": {
        "select_id": 1,
        "steps": [
          {
            "condition_processing": {
              "condition": "WHERE",
              "original_condition": "t1.a = 1 and t1.b = 2",
              "steps": [
                {
                  "transformation": "equality_propagation",
                  "resulting_condition": "multiple equal(1, t1.a) and multiple equal(2, t1.b)"
                },
                {
                  "transformation": "constant_propagation",
                  "resulting_condition": "multiple equal(1, t1.a) and multiple equal(2, t1.b)"
                },
                {
                  "transformation": "trivial_condition_removal",
                  "resulting_condition": "multiple equal(1, t1.a) and multiple equal(2, t1.b)"
                }
              ]
            }
          },
          {
            "table_dependencies": [
              {
                "table": "t1",
                "row_may_be_null": false,
                "map_bit": 0,
                "depends_on_map_bits": []
              }
            ]
          },
          {
            "ref_optimizer_key_uses": [
              {
                "table": "t1",
                "field": "a",
                "equals": "1",
                "null_rejecting": false
              },
              {
                "table": "t1",
                "field": "a",
                "equals": "1",
                "null_rejecting": false
              },
              {
                "table": "t1",
                "field": "b",
                "equals": "2",
                "null_rejecting": false
              }
            ]
          },
          "rows_estimation": [
            {
              "table": "t1",
              "range_analysis": {
                "table_scan": {
                  "rows": 1000,
                  "cost": 232
                },
                "potential_range_indexes": [
                  {
                    "index": "a_a",
                    "usable": false,
                    "cause": "not_applicable"
                  },
                  {
                    "index": "a_c",
                    "usable": true,
                    "key_parts": ["a", "c"]
                  },
                  {
                    "index": "a_b",
                    "usable": true,
                    "key_parts": ["a", "b"]
                  }
                ],
                "setup_range_conditions": [],
                "group_index_range": {
                  "chosen": false,
                  "cause": "no_group_by_or_distinct"
                },
                "analyzing_range_alternatives": {
                  "range_scan_alternatives": [
                    {
                      "index": "a_c",
                      "ranges": ["1 <= a <= 1"],
                      "rowid_ordered": false,
                      "using_mrr": false,
                      "index_only": false,
                      "rows": 180,
                      "cost": 217.01,
                      "chosen": true
                    },
                    {
                      "index": "a_b",
                      "ranges": ["1 <= a <= 1 AND 2 <= b <= 2"],
                      "rowid_ordered": true,
                      "using_mrr": false,
                      "index_only": false,
                      "rows": 21,
                      "cost": 26.21,
                      "chosen": true
                    }
                  ],
                  "analyzing_roworder_intersect": {
                    "cause": "too_few_roworder_scans"
                  },
                  "analyzing_index_merge_union": []
                },
                "chosen_range_access_summary": {
                  "range_access_plan": {
                    "type": "range_scan",
                    "index": "a_b",
                    "rows": 21,
                    "ranges": ["1 <= a <= 1 AND 2 <= b <= 2"]
                  },
                  "rows_for_plan": 21,
                  "cost_for_plan": 26.21,
                  "chosen": true
                }
              }
            }
          ],
          {
            "considered_execution_plans": [
              {
                "plan_prefix": [],
                "table": "t1",
                "best_access_path": {
                  "considered_access_paths": [
                    {
                      "access_type": "ref",
                      "index": "a_c",
                      "used_range_estimates": true,
                      "rows": 180,
                      "cost": 128,
                      "chosen": true
                    },
                    {
                      "access_type": "ref",
                      "index": "a_b",
                      "used_range_estimates": true,
                      "rows": 21,
                      "cost": 26.2,
                      "chosen": true
                    },
                    {
                      "type": "scan",
                      "chosen": false,
                      "cause": "cost"
                    }
                  ]
                },
                "rows_for_plan": 21,
                "cost_for_plan": 26.2
              }
            ]
          },
          {
            "attaching_conditions_to_tables": {
              "original_condition": "t1.a = 1 and t1.b = 2",
              "attached_conditions_computation": [],
              "attached_conditions_summary": [
                {
                  "table": "t1",
                  "attached": null
                }
              ]
            }
          },
          {
            "reconsidering_access_paths_for_index_ordering": {
              "clause": "ORDER BY",
              "fanout": 1,
              "read_time": 22.001,
              "table_name": "t1",
              "rows_estimation": 21,
              "possible_keys": [
                {
                  "index": "a_a",
                  "can_resolve_order": true,
                  "updated_limit": 47,
                  "index_scan_time": 47,
                  "usable": false,
                  "cause": "cost"
                },
                {
                  "index": "a_c",
                  "can_resolve_order": true,
                  "updated_limit": 47,
                  "range_scan_time": 24.022,
                  "index_scan_time": 24.022,
                  "usable": false,
                  "cause": "cost"
                },
                {
                  "index": "a_b",
                  "can_resolve_order": false,
                  "cause": "not_usable_index_for_the query"
                }
              ]
            }
          }
        ]
      }
    },
    {
      "join_execution": {
        "select_id": 1,
        "steps": []
      }
    }
  ]
}	0	0
drop table t1,ten,one_k;
