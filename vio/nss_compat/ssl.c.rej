--- vio/nss_compat/ssl.c
+++ vio/nss_compat/ssl.c
@@ -18,6 +18,7 @@
 
 #include <unistd.h>
 #include <stdio.h>
+#include <string.h>
 #include "nss_compat_ossl.h"
 #include <secder.h>
 #include <secmod.h>
@@ -46,11 +47,12 @@ typedef struct {
 #define PK11_SETATTRS(x,id,v,l) (x)->type = (id); \
                 (x)->pValue=(v); (x)->ulValueLen = (l);
 
+/* Todo: do we really need that definition?
 #define CERT_NewTempCertificate __CERT_NewTempCertificate
+*/
 
 /* functions for handling token passwords */
 static char * nss_password_prompt(PK11SlotInfo *slot, PRBool retry, void *arg);
-static char * nss_no_password(PK11SlotInfo *slot, PRBool retry, void *arg);
 static char * nss_get_password(FILE *input, FILE *output, PK11SlotInfo *slot, PRBool (*ok)(unsigned char *), PRUint32 retry);
 static PRBool nss_check_password(unsigned char *cp);
 static void echoOff(int fd);
@@ -75,7 +77,7 @@ static int nss_set_private(PRFileDesc *fd, PRFilePrivate *data);
 int is_initialized = 0;
 static const char* pem_library = "libnsspem.so";
 
-static SECMODModule* mod = NULL;
+static SECMODModule* modPEM = NULL;
 CK_SLOT_ID slotCount = 1;
 
 #define DEF_SSL2_TIMEOUT        100L  /* seconds */
@@ -127,195 +129,54 @@ typedef struct
 /* OpenSSL treats SSL3 and TLSv1 the same */
 #define TLS1  SSL3
 
-/* Cipher translation */
-static cipher_properties ciphers_def[ciphernum] =
-{
-    /* SSL 2 ciphers */
-    {"DES-CBC3-MD5", SSL_EN_DES_192_EDE3_CBC_WITH_MD5, SSL_kRSA|SSL_aRSA|SSL_3DES|SSL_MD5, SSL2, 168, 168, SSL_HIGH, SSL_ALLOWED},
-    {"RC2-CBC-MD5", SSL_EN_RC2_128_CBC_WITH_MD5, SSL_kRSA|SSL_aRSA|SSL_RC2|SSL_MD5, SSL2, 128, 128, SSL_MEDIUM, SSL_ALLOWED},
-    {"RC4-MD5", SSL_EN_RC4_128_WITH_MD5, SSL_kRSA|SSL_aRSA|SSL_RC4|SSL_MD5, SSL2, 128, 128, SSL_MEDIUM, SSL_ALLOWED},
-    {"DES-CBC-MD5", SSL_EN_DES_64_CBC_WITH_MD5, SSL_kRSA|SSL_aRSA|SSL_DES|SSL_MD5, SSL2, 56, 56, SSL_LOW, SSL_ALLOWED},
-    {"EXP-RC2-CBC-MD5", SSL_EN_RC2_128_CBC_EXPORT40_WITH_MD5, SSL_kRSA|SSL_aRSA|SSL_RC2|SSL_MD5, SSL2, 40, 128, SSL_EXPORT40, SSL_ALLOWED},
-    {"EXP-RC4-MD5", SSL_EN_RC4_128_EXPORT40_WITH_MD5, SSL_kRSA|SSL_aRSA|SSL_RC4|SSL_MD5, SSL2, 40, 128, SSL_EXPORT40, SSL_ALLOWED},
-
-    /* SSL3 ciphers */
-    {"RC4-MD5", SSL_RSA_WITH_RC4_128_MD5, SSL_kRSA|SSL_aRSA|SSL_RC4|SSL_MD5, SSL3, 128, 128, SSL_MEDIUM, SSL_ALLOWED},
-    {"RC4-SHA", SSL_RSA_WITH_RC4_128_SHA, SSL_kRSA|SSL_aRSA|SSL_RC4|SSL_SHA1, SSL3, 128, 128, SSL_MEDIUM, SSL_NOT_ALLOWED},
-    {"DES-CBC3-SHA", SSL_RSA_WITH_3DES_EDE_CBC_SHA, SSL_kRSA|SSL_aRSA|SSL_3DES|SSL_SHA1, SSL3, 168, 168, SSL_HIGH, SSL_ALLOWED},
-    {"DES-CBC-SHA", SSL_RSA_WITH_DES_CBC_SHA, SSL_kRSA|SSL_aRSA|SSL_DES|SSL_SHA1, SSL3, 56, 56, SSL_LOW, SSL_ALLOWED},
-    {"EXP-RC4-MD5", SSL_RSA_EXPORT_WITH_RC4_40_MD5, SSL_kRSA|SSL_aRSA|SSL_RC4|SSL_MD5, SSL3, 40, 128, SSL_EXPORT40, SSL_ALLOWED},
-    {"EXP-RC2-CBC-MD5", SSL_RSA_EXPORT_WITH_RC2_CBC_40_MD5, SSL_kRSA|SSL_aRSA|SSL_RC2|SSL_MD5, SSL3, 0, 0, SSL_EXPORT40, SSL_ALLOWED},
-    {"NULL-MD5", SSL_RSA_WITH_NULL_MD5, SSL_kRSA|SSL_aRSA|SSL_eNULL|SSL_MD5, SSL3, 0, 0, SSL_NULL, SSL_NOT_ALLOWED},
-    {"NULL-SHA", SSL_RSA_WITH_NULL_SHA, SSL_kRSA|SSL_aRSA|SSL_eNULL|SSL_SHA1, SSL3, 0, 0, SSL_NULL, SSL_NOT_ALLOWED},
-
-    /* TLSv1 ciphers */
-    {"EXP1024-DES-CBC-SHA", TLS_RSA_EXPORT1024_WITH_DES_CBC_SHA, SSL_kRSA|SSL_aRSA|SSL_DES|SSL_SHA, TLS1, 56, 56, SSL_EXPORT56, SSL_ALLOWED},
-    {"EXP1024-RC4-SHA", TLS_RSA_EXPORT1024_WITH_RC4_56_SHA, SSL_kRSA|SSL_aRSA|SSL_RC4|SSL_SHA, TLS1, 56, 56, SSL_EXPORT56, SSL_ALLOWED},
-    {"AES128-SHA", TLS_RSA_WITH_AES_128_CBC_SHA, SSL_kRSA|SSL_aRSA|SSL_AES|SSL_SHA, TLS1, 128, 128, SSL_HIGH, SSL_NOT_ALLOWED},
-    {"AES256-SHA", TLS_RSA_WITH_AES_256_CBC_SHA, SSL_kRSA|SSL_aRSA|SSL_AES|SSL_SHA, TLS1, 256, 256, SSL_HIGH, SSL_NOT_ALLOWED},
+#define MAX_NSS_CIPHERS sizeof(tls_ciphers) / sizeof(tls_ciphers[0]) + 1;
+
+struct st_cipher_map {
+  int sid;
+  const char *name;
+} tls_ciphers[] = {
+  { TLS_RSA_WITH_3DES_EDE_CBC_SHA, "DES-CBC3-SHA" },
+  { TLS_RSA_WITH_AES_128_CBC_SHA, "AES128-SHA" },
+  { TLS_RSA_WITH_AES_256_CBC_SHA, "AES256-SHA" },
+  { TLS_RSA_WITH_CAMELLIA_128_CBC_SHA, "CAMELLIA128-SHA" },
+  { TLS_RSA_WITH_CAMELLIA_256_CBC_SHA, "CAMELLIA256-SHA" },
+  { TLS_RSA_WITH_AES_128_CBC_SHA256, "AES128-SHA256" },
+  { TLS_RSA_WITH_AES_256_CBC_SHA256, "AES256-SHA256" },
+  { TLS_RSA_WITH_AES_128_GCM_SHA256, "AES128-GCM-SHA256" },
+  { TLS_RSA_WITH_AES_256_GCM_SHA384, "AES256-GCM-SHA384" },
+  { TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA, "EDH-RSA-DES-CBC3-SHA" },
+  { TLS_DHE_RSA_WITH_AES_128_CBC_SHA, "DHE-RSA-AES128-SHA" },
+  { TLS_DHE_RSA_WITH_AES_256_CBC_SHA, "DHE-RSA-AES256-SHA" },
+  { TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA, "DHE-RSA-CAMELLIA128-SHA" },
+  { TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA, "DHE-RSA-CAMELLIA256-SHA" },
+  { TLS_DHE_RSA_WITH_AES_128_CBC_SHA256, "DHE-RSA-AES128-SHA256" },
+  { TLS_DHE_RSA_WITH_AES_256_CBC_SHA256, "DHE-RSA-AES256-SHA256" },
+  { TLS_DHE_RSA_WITH_AES_128_GCM_SHA256, "DHE-RSA-AES128-GCM-SHA256" },
+  { TLS_DHE_RSA_WITH_AES_256_GCM_SHA384, "DHE-RSA-AES256-GCM-SHA384" },
+  { TLS_DHE_RSA_WITH_CHACHA20_POLY1305_SHA256, "DHE-RSA-CHACHA20-POLY1305" },
+  { TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA, "ECDHE-RSA-DES-CBC3-SHA" },
+  { TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA, "ECDHE-RSA-AES128-SHA" },
+  { TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA, "ECDHE-RSA-AES256-SHA" },
+  { TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384, "ECDHE-RSA-AES256-SHA384" },
+  { TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA, "ECDHE-ECDSA-DES-CBC3-SHA" },
+  { TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA, "ECDHE-ECDSA-AES128-SHA" },
+  { TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA, "ECDHE-ECDSA-AES256-SHA" },
+  { TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256, "ECDHE-ECDSA-AES128-SHA256" },
+  { TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256, "ECDHE-RSA-AES128-SHA256" },
+  { TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256, "ECDHE-ECDSA-AES128-GCM-SHA256" },
+  { TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384, "ECDHE-ECDSA-AES256-GCM-SHA384" },
+  { TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256, "ECDHE-RSA-AES128-GCM-SHA256" },
+  { TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384, "ECDHE-RSA-AES256-GCM-SHA384" },
+  { TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384, "ECDHE-ECDSA-AES256-SHA384" },
+  { TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256, "ECDHE-RSA-CHACHA20-POLY1305" },
+  { TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256, "ECDHE-ECDSA-CHACHA20-POLY1305" },
+  { TLS_DHE_PSK_WITH_AES_128_GCM_SHA256, "DHE-PSK-AES128-GCM-SHA256" },
+  { TLS_DHE_PSK_WITH_AES_256_GCM_SHA384, "DHE-PSK-AES256-GCM-SHA384" },
+  { TLS_DHE_PSK_WITH_CHACHA20_POLY1305_SHA256, "DHE-PSK-CHACHA20-POLY1305" },
+  { TLS_ECDHE_PSK_WITH_CHACHA20_POLY1305_SHA256, "ECDHE-PSK-CHACHA20-POLY1305" },
+  { 0, NULL}
 };
 
-/*
- * cipher_list is an integer array with the following values:
- *   -1: never enable this cipher
- *    0: cipher disabled
- *    1: cipher enabled
- */
-int nss_parse_ciphers(char *ciphers, int cipher_list[ciphernum])
-{
-    int i;
-    char *cipher;
-    int action;
-    int rv;
-
-    /* All disabled to start */
-    for (i=0; i<ciphernum; i++)
-        cipher_list[i] = 0;
-
-    cipher = ciphers;
-
-    while (ciphers && (strlen(ciphers)))
-    {
-        while ((*cipher) && (isspace(*cipher)))
-            ++cipher;
-
-        action = 1;
-        switch(*cipher)
-        {
-            case '+': /* Add something */
-                action = 1;
-                cipher++;
-                break;
-            case '-': /* Subtract something */
-                action = 0;
-                cipher++;
-                break;
-            case '!':  /* Disable something */
-                action = -1;
-                cipher++;
-                break;
-            default:
-               /* do nothing */
-                break;
-        }
-
-        if ((ciphers = strchr(cipher, ':'))) {
-            *ciphers++ = '\0';
-        }
-
-        /* Do the easy one first */
-        if (!strcmp(cipher, "ALL")) {
-            for (i=0; i<ciphernum; i++) {
-                if (!(ciphers_def[i].attr & SSL_eNULL))
-                    cipher_list[i] = action;
-            }
-        } else if (!strcmp(cipher, "COMPLEMENTOFALL")) {
-            for (i=0; i<ciphernum; i++) {
-                if ((ciphers_def[i].attr & SSL_eNULL))
-                    cipher_list[i] = action;
-            }
-        } else if (!strcmp(cipher, "DEFAULT")) {
-            for (i=0; i<ciphernum; i++) {
-                cipher_list[i] = ciphers_def[i].enabled == SSL_ALLOWED ? 1 : 0;
-            }
-        } else {
-            int mask = 0;
-            int strength = 0;
-            int protocol = 0;
-            char *c;
-
-            c = cipher;
-            while (c && (strlen(c))) {
-
-                if ((c = strchr(cipher, '+'))) {
-                    *c++ = '\0';
-                }
-
-                if (!strcmp(cipher, "RSA")) {
-                    mask |= SSL_RSA;
-                } else if ((!strcmp(cipher, "NULL")) || (!strcmp(cipher, "eNULL"))) {
-                    mask |= SSL_eNULL;
-                } else if (!strcmp(cipher, "AES")) {
-                    mask |= SSL_AES;
-                } else if (!strcmp(cipher, "3DES")) {
-                    mask |= SSL_3DES;
-                } else if (!strcmp(cipher, "DES")) {
-                    mask |= SSL_DES;
-                } else if (!strcmp(cipher, "RC4")) {
-                    mask |= SSL_RC4;
-                } else if (!strcmp(cipher, "RC2")) {
-                    mask |= SSL_RC2;
-                } else if (!strcmp(cipher, "MD5")) {
-                    mask |= SSL_MD5;
-                } else if ((!strcmp(cipher, "SHA")) || (!strcmp(cipher, "SHA1"))) {
-                    mask |= SSL_SHA1;
-                } else if (!strcmp(cipher, "SSLv2")) {
-                    protocol |= SSL2;
-                } else if (!strcmp(cipher, "SSLv3")) {
-                    protocol |= SSL3;
-                } else if (!strcmp(cipher, "TLSv1")) {
-                    protocol |= TLS1;
-                } else if (!strcmp(cipher, "HIGH")) {
-                    strength |= SSL_HIGH;
-                } else if (!strcmp(cipher, "MEDIUM")) {
-                    strength |= SSL_MEDIUM;
-                } else if (!strcmp(cipher, "LOW")) {
-                    strength |= SSL_LOW;
-                } else if ((!strcmp(cipher, "EXPORT")) || (!strcmp(cipher, "EXP"))) {
-                    strength |= SSL_EXPORT40|SSL_EXPORT56;
-                } else if (!strcmp(cipher, "EXPORT40")) {
-                    strength |= SSL_EXPORT40;
-                } else if (!strcmp(cipher, "EXPORT56")) {
-                    strength |= SSL_EXPORT56;
-                }
-
-                if (c)
-                    cipher = c;
-
-            } /* while */
-
-            /* If we have a mask, apply it. If not then perhaps they provided
-             * a specific cipher to enable.
-             */
-            if (mask || strength || protocol) 
-                for (i=0; i<ciphernum; i++) {
-                    if (((ciphers_def[i].attr & mask) ||
-                     (ciphers_def[i].strength & strength) ||
-                     (ciphers_def[i].version & protocol)) &&
-                     (cipher_list[i] != -1)) {
-                        /* Enable the NULL ciphers only if explicity
-                         * requested */
-                        if (ciphers_def[i].attr & SSL_eNULL) {
-                            if (mask & SSL_eNULL)
-                                cipher_list[i] = action;
-                        } else
-                            cipher_list[i] = action;
-                    }
-                }
-            else {
-                for (i=0; i<ciphernum; i++) {
-                    if (!strcmp(ciphers_def[i].ossl_name, cipher) &&
-                        cipher_list[1] != -1)
-                        cipher_list[i] = action;
-                }
-            }
-        }
-
-        if (ciphers)
-            cipher = ciphers;
-   
-    }
-
-    /* See if any ciphers were enabled */
-    rv = 0;
-    for (i=0; i<ciphernum; i++) {
-        if (cipher_list[i] == 1)
-            rv = 1;
-    }
-
-    return rv;
-}
-
 static PRStatus PR_CALLBACK
 layer_close(PRFileDesc *fd)
 {
@@ -326,7 +187,7 @@ layer_close(PRFileDesc *fd)
 /* Hashing function for application-specific data (ex_data). */
 static PLHashNumber HashFunc(const void * key)
 {
-   return (PLHashNumber)(key);
+  return (PLHashNumber)((char *)key - (char *)NULL);
 }
 
 ossl_ctx_t *new_ossl(PRFileDesc *s)
@@ -571,7 +432,7 @@ FindServerCertFromNickname(const char* name)
                 } else {
                     if ( (bestCertMatchedUsage == matchedUsage) &&
                     (((PR_FALSE == bestCertIsValid) && (PR_TRUE == isValid)) ||
-                    ((PR_TRUE == bestCertIsValid == isValid) && (PR_TRUE == cert_IsNewer(cert, bestcert))))) {
+                    ((PR_TRUE == (bestCertIsValid == isValid)) && (PR_TRUE == cert_IsNewer(cert, bestcert))))) {
                         /* The cert previously picked was invalid but this one
                          * is. Or they were both valid but this one is newer.
                          */
@@ -601,7 +462,7 @@ FindServerCertFromNickname(const char* name)
  * Executed automatically when the SSL handshake is completed.
  * Call the final handshake callback if one was set.
  */
-SECStatus nss_HandshakeCallback(PRFileDesc *ssl, void *arg)
+void nss_HandshakeCallback(PRFileDesc *ssl, void *arg)
 {
     ossl_ctx_t *ossl;
     void (*info_callback)(const SSL *ssl, int type, int val);
@@ -613,7 +474,7 @@ SECStatus nss_HandshakeCallback(PRFileDesc *ssl, void *arg)
     if (info_callback)
         info_callback(ssl, SSL_CB_HANDSHAKE_DONE, 1);
 
-    return SECSuccess;
+    return;
 }
 
 SECStatus nss_Init_Tokens()
@@ -707,9 +568,9 @@ static PRBool nss_check_password(unsigned char *cp)
     int nnonalnum = 0;  /* number of ASCII non-alphanumeric characters */
     int nnonascii = 0;  /* number of non-ASCII characters */
     int nclass;         /* number of character classes */
-    int ulPinLen;
+    unsigned int ulPinLen;
 
-    ulPinLen = strlen((char *)cp);
+    ulPinLen = (unsigned int)strlen((char *)cp);
 
     /* We'll give non-FIPS users a pass */
     if (!PK11_IsFIPS())
@@ -777,15 +638,6 @@ static PRBool nss_check_password(unsigned char *cp)
     return PR_TRUE;
 }
 
-/*
- * Password callback so the user is not prompted to enter the password
- * after the server starts.
- */
-static char * nss_no_password(PK11SlotInfo *slot, PRBool retry, void *arg)
-{
-    return NULL;
-}
-
 /*
  * Password callback to prompt the user for a password. This requires
  * twiddling with the tty. Alternatively, if the file password.conf
@@ -796,7 +648,6 @@ static char *nss_get_password(FILE *input, FILE *output,
                                        PRBool (*ok)(unsigned char *),
                                        PRUint32 retry)
 {
-    char *token_name = NULL;
 #ifdef RETRIEVE_PASSWORD_FROM_FILE
     int tmp;
     char *pwdstr = NULL;
@@ -808,8 +659,6 @@ static char *nss_get_password(FILE *input, FILE *output,
     int infd = fileno(input);
     int isTTY = isatty(infd);
 
-    token_name = PK11_GetTokenName(slot);
-
 #ifdef RETRIEVE_PASSWORD_FROM_FILE
         /* Try to get the passwords from the password file if it exists.
          * THIS IS UNSAFE and is provided for convenience only. Without this
@@ -991,7 +840,7 @@ nss_set_server_cert(SSL_CTX *ctx, const char *filename, PRBool cacert)
         if (n) {
             n++;
         }
-        if (mod == NULL) /* we have a file-based cert but no PEM module */
+        if (modPEM == NULL) /* we have a file-based cert but no PEM module */
             return 1;
     } else {
         if (cacert)
@@ -1010,7 +859,7 @@ nss_set_server_cert(SSL_CTX *ctx, const char *filename, PRBool cacert)
      */
     if (cacert) {
         slotID = 0;
-    } else if (ossl->slotID == -1) {
+    } else if (ossl->slotID == (unsigned long int)-1) {
         ossl->slotID = slotCount++;
         slotID = ossl->slotID;
     }
@@ -1212,7 +1061,6 @@ nss_set_private(PRFileDesc *fd, PRFilePrivate *data)
 int SSL_library_init(void)
 {
     const PRIOMethods *defaultMethods;
-    char *certDir = NULL;
     SECStatus status;
 #ifdef PKCS11_PEM_MODULE
     char *configstring = NULL;
@@ -1251,11 +1099,11 @@ int SSL_library_init(void)
 
     PR_snprintf(configstring, 4096, "library=%s name=PEM parameters=\"\"", pem_library);
 
-    mod = SECMOD_LoadUserModule(configstring, NULL, PR_FALSE);
-    if (!mod || !mod->loaded) {
-        if (mod) {
-            SECMOD_DestroyModule(mod);
-            mod = NULL;
+    modPEM = SECMOD_LoadUserModule(configstring, NULL, PR_FALSE);
+    if (!modPEM || !modPEM->loaded) {
+        if (modPEM) {
+            SECMOD_DestroyModule(modPEM);
+            modPEM = NULL;
         }
         free(configstring);
         return 1;
@@ -1628,7 +1476,7 @@ void SSL_load_error_strings(void)
 
 int SSL_read(SSL *ssl, void *buf, int sz)
 {
-    int rv;
+    size_t read= 0;
     int flags;
     ossl_ctx_t *ossl;
 
@@ -1643,14 +1491,13 @@ int SSL_read(SSL *ssl, void *buf, int sz)
         }
     }
 
-    rv = PR_Read(ssl, buf, sz);
-
-    return rv;
+    read= PR_Read(ssl, buf, sz);
+    return read;
 }
 
 int SSL_write(SSL *ssl, const void *buf, int num)
 { 
-    int rv;
+    int written;
     int flags;
     ossl_ctx_t *ossl;
 
@@ -1666,9 +1513,8 @@ int SSL_write(SSL *ssl, const void *buf, int num)
         }
     } 
 
-    rv = PR_Write(ssl, buf, num);
-
-    return rv;
+    written = PR_Write(ssl, buf, num);
+    return written;
 }
 
 SSL_METHOD *create_context(PRBool ssl2, PRBool ssl3, PRBool tlsv1, 
@@ -1677,7 +1523,6 @@ SSL_METHOD *create_context(PRBool ssl2, PRBool ssl3, PRBool tlsv1,
     PRFileDesc *s = NULL;
     PRFileDesc *layer;
     ossl_ctx_t *ossl;
-    int i;
 
     if (PR_TRUE != NSS_IsInitialized()) {
         PR_SetError(SEC_ERROR_NOT_INITIALIZED, 0);
@@ -1732,37 +1577,11 @@ SSL_METHOD *create_context(PRBool ssl2, PRBool ssl3, PRBool tlsv1,
     if (SSL_AuthCertificateHook(s, AuthCertificateHandler, CERT_GetDefaultCertDB()) != SECSuccess)
             goto error;
 
-    /* Disable all ciphers */
-/*    for (i = 0; i < SSL_NumImplementedCiphers; i++)
-    {
-        SSL_CipherPrefSet(s, SSL_ImplementedCiphers[i], SSL_NOT_ALLOWED);
-    }
-*/
-    /* Enable the ones we want on by default */
-    for (i = 0; i < SSL_NumImplementedCiphers; i++)
-    {
-        SSLCipherSuiteInfo suite;
-        PRBool enabled;
-       
-        if (SSL_GetCipherSuiteInfo(ciphers_def[i].num, &suite, sizeof suite)
-            == SECSuccess)
-        {
-            enabled = ciphers_def[i].enabled;
-            if (enabled == SSL_ALLOWED)
-            {
-                if (PK11_IsFIPS() && !suite.isFIPS)    
-                    enabled = SSL_NOT_ALLOWED;
-            }
-            SSL_CipherPrefSet(s, ciphers_def[i].num, enabled);
-        }
-    }
-
     return (s);
 
     error:
         if (s)
             PR_Close(s);
-
     return (NULL);
 }
 
@@ -1850,38 +1669,65 @@ long SSL_CTX_set_timeout(SSL_CTX *ssl, long tm)
     return 0; /* with no context this is really undefined */
 }
 
-int SSL_CTX_set_cipher_list(SSL_CTX *ctx, const char *str)
+static int ma_nss_set_ciphers(SSL_CTX *ctx,
+                              const char *cipher_str)
 {
-    int cipher_state[ciphernum];
-    int rv, i;
+  char *token;
+  const PRUint16  cipher_cnt= SSL_GetNumImplementedCiphers();
+  const PRUint16  *ciphers= SSL_GetImplementedCiphers();
+  unsigned int i, valid_ciphers= 0;
 
-    rv = nss_parse_ciphers((char *)str, cipher_state);
+  /* if no cipher string was provided, we don't return an error, but use the domestic
+     policy, which was set in initialization routine */
+  if (!cipher_str)
+    return 1;
 
-    if (rv) {
-        /* First disable everything */
-        for (i = 0; i < SSL_NumImplementedCiphers; i++)
-            SSL_CipherPrefSet(ctx, SSL_ImplementedCiphers[i], SSL_NOT_ALLOWED);
+  /* We first disable all cipher suites and enable afterwards the cipher suites
+     passed in cipher_str parameter */ 
+  for (i=0; i < cipher_cnt; i++)
+    SSL_CipherPrefSet(ctx, ciphers[i], PR_FALSE);
+ 
+  token= strtok((char *)cipher_str, ":");
 
-        /* Now enable what was requested */
-        for (i=0; i<ciphernum; i++) {
-            SSLCipherSuiteInfo suite;
-            PRBool enabled;
-       
-            if (SSL_GetCipherSuiteInfo(ciphers_def[i].num, &suite, sizeof suite)
-                == SECSuccess)
-            {
-                enabled = cipher_state[i] < 0 ? 0 : cipher_state[i];
-                if (enabled == SSL_ALLOWED)
-                {
-                    if (PK11_IsFIPS() && !suite.isFIPS)    
-                        enabled = SSL_NOT_ALLOWED;
-                }
-                SSL_CipherPrefSet(ctx, ciphers_def[i].num, enabled);
-            }
-        }
-    }
-        
-    return rv;
+  while (token)
+  {
+    int i= 0;
+    unsigned char cipher_found= 0;
+    while (tls_ciphers[i].name)
+    {
+      if (strstr(token, tls_ciphers[i].name))
+      {
+         PRInt32 policy = 0;
+         if (SECSuccess != SSL_CipherPolicyGet(tls_ciphers[i].sid, &policy))
+           return 0;
+         if(policy)
+         {
+           if (SECSuccess != SSL_CipherPrefSet(ctx, tls_ciphers[i].sid, PR_TRUE))
+             return 0;
+           cipher_found= 1;
+           valid_ciphers++; 
+           break;
+         };
+      }
+      i++;
+    }
+    /* If the cipher was not ok, we return error */
+    if (!cipher_found)
+      goto invalid_cipher;
+
+    token = strtok(NULL, ":");
+  }
+  if (valid_ciphers)
+    return 1;
+invalid_cipher:
+  PR_SetError(SSL_ERROR_UNKNOWN_CIPHER_SUITE, 0);
+  return 0;
+}
+
+
+int SSL_CTX_set_cipher_list(SSL_CTX *ctx, const char *str)
+{
+  return ma_nss_set_ciphers(ctx, str);
 }
 
 /* API for OpenSSL statistics */
@@ -2045,7 +1891,7 @@ int SSL_CTX_use_PrivateKey_file(SSL_CTX *ctx, const char *filename, int type)
     
     attrs = theTemplate;
 
-    if (ossl->slotID == -1)
+    if (ossl->slotID == (unsigned int)-1)
         ossl->slotID = slotCount++;
 
     /* May already exist if the cert is loaded */
@@ -2071,7 +1917,7 @@ int SSL_CTX_use_PrivateKey_file(SSL_CTX *ctx, const char *filename, int type)
     }
 
     /* This will force the token to be seen as re-inserted */
-    SECMOD_WaitForAnyTokenEvent(mod, 0, 0);
+    SECMOD_WaitForAnyTokenEvent(modPEM, 0, 0);
     PK11_IsPresent(slot);
 
     if (PK11_Authenticate(slot, PR_TRUE, &retryCount) != SECSuccess) {
@@ -2593,10 +2439,10 @@ PRStatus SSL_set_shutdown(SSL *ssl, int flags)
     else if ((flags & SSL_RECEIVED_SHUTDOWN) == SSL_RECEIVED_SHUTDOWN)
         status = PR_Shutdown(ssl, PR_SHUTDOWN_RCV);
 
-    return 0; /* returns no diagnostic info */
+    return status;
 }
 
-char *SSL_get_version(SSL *ssl)
+const char *SSL_get_version(SSL *ssl)
 {
     SSLChannelInfo      channel;
     SSLCipherSuiteInfo  suite;
@@ -2930,11 +2776,17 @@ void SSL_set_accept_state(SSL *s)
 int SSL_accept(SSL *ssl)
 {
     PRPollDesc pollset[2];
+    static PRSocketOptionData sock_opt;
+    SECStatus status;
 
     if (!configureserver(ssl))
         return 0;
 
-    SSL_ResetHandshake(ssl, PR_TRUE); /* reset as server */
+    if (SSL_ResetHandshake(ssl, PR_TRUE) != SECSuccess)
+    {
+      printf("Handshake failed: Errorcode= %d\n", PR_GetError());
+      printf("Error: %s\n", PR_ErrorToName(PR_GetError()));
+    }
 
     /* Force the handshake */
     pollset[0].in_flags = PR_POLL_WRITE | PR_POLL_EXCEPT;
@@ -2947,24 +2799,27 @@ int SSL_accept(SSL *ssl)
 
         if (SSL_ForceHandshake(ssl) != SECSuccess)
         {
-          printf("Handshake failed: Errorcode= %d\n", PR_GetError());
-          printf("Error: %s\n", PR_ErrorToName(PR_GetError()));
+          int err= PR_GetError();
+          fprintf(stderr, "Handshake failed: Errorcode= %d\n", err);
+          fprintf(stderr, "Error: %s\n", PR_ErrorToName(err));
+          if (PR_GetError() != PR_WOULD_BLOCK_ERROR)
+            goto error;
         }
+
         filesReady = PR_Poll(pollset, 1, PR_INTERVAL_NO_TIMEOUT);
         if (filesReady < 0) {
             goto error;
         }
-        if (filesReady == 0) { /* shouldn't happen! */
+        if (filesReady == 0)
             goto error;
-        }
+
         status = PR_ConnectContinue(ssl, pollset[0].out_flags);
         if (status == PR_SUCCESS)
             break;
         if (PR_GetError() != PR_IN_PROGRESS_ERROR)
             goto error;
     }
-
-    error:
+error:
 
     return 1;
 }
@@ -3273,4 +3128,18 @@ int ASN1_STRING_type(ASN1_STRING *x)
 int ASN1_STRING_length(ASN1_STRING *x)
 {
     return x->length;
+
+}
+
+void SSL_library_end(void)
+{
+  if (NSS_IsInitialized())
+  {
+    if (modPEM)
+    {
+      SECMOD_DestroyModule(modPEM);
+      modPEM= NULL;
+    }
+    NSS_Shutdown();
+  }
 }
